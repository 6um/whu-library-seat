<!DOCTYPE html>
<html>
  <head>
    <title>武汉大学图书馆抢座软件 - 使用统计</title>
    <link rel="stylesheet" href="https://unpkg.com/element-ui/lib/theme-chalk/index.css">
    <style>
    #app {
      margin: 0;
    }
    .chart-wrapper {
      box-sizing: border-box;
      text-align: right;
      margin: 10px 0 20px 0;
      border-top-left-radius: 3px;
      border-top-right-radius: 3px;
      padding-bottom: 8px !important;
      padding-top: 8px !important;
      border: 1px solid #e1e4e8!important;
      border-color: #d1d5da !important;
    }
    .export-btn {
      -webkit-appearance: button;
      cursor: pointer;
      display: inline-block;
      margin: 10px 20px;
      right: 0;
      padding: 0.25rem 0.5rem;
      font-weight: 400;
      color: #8d99a6;
      background: transparent;
      background-image: none;
      border: 1px solid #8d99a6;
      user-select: none;
      white-space: nowrap;
      vertical-align: middle;
      text-align: center;
      border-radius: 0.2rem;
      font-size: 0.875rem;
      text-decoration: none;
      outline: none;
      transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }
    .export-btn:hover {
      color: #fff;
      background-color: #8d99a6;
      border-color: #8d99a6;
      text-decoration: none;
    }
    #heatmap {
    }
    #hourline {
    }
    #deviceline {
    }
    #data-list {
      box-sizing: border-box;
      margin: 0 0 10px 0;
      border-top-left-radius: 3px;
      border-top-right-radius: 3px;
      padding-bottom: 8px !important;
      padding-top: 8px !important;
      border: 1px solid #e1e4e8!important;
      border-color: #d1d5da !important;
    }
    #data-list-header {
      margin: 10px 20px 0 20px;
      white-space: nowrap;
      overflow: auto;
      border-top-left-radius: 3px;
      border-top-right-radius: 3px;
      padding-bottom: 8px !important;
      padding-top: 8px !important;
      border: 1px solid #e1e4e8!important;
      border-color: #d1d5da !important;
    }
    .el-table {
      border-top-left-radius: 3px;
      border-top-right-radius: 3px;
      padding-bottom: 8px !important;
      padding-top: 8px !important;
      border: 1px solid #e1e4e8!important;
      border-color: #d1d5da !important;
    }
    .el-input {
      width: 140px;
    }
    span {
      margin-left: 15px;
    }
    .el-main {
      padding-bottom: 0;
    }
    </style>
    <script>
    // if (!localStorage.homepageAuthForCSTaoOrFriend || localStorage.homepageAuthForCSTaoOrFriend !== '7f1a65908b05238c21c134c764c89e28') {
    //   window.location = '/auth/index.html'
    // }
    </script>
  </head>
  <body>
    <div id="app">
      <div class="chart-wrapper">
        <div id="heatmap"></div>
        <button v-if="heatmap" class="export-btn" @click="heatmap.export()">Export</button>
      </div>
      <div class="chart-wrapper">
        <div id="hourline"></div>
        <button v-if="hourline" class="export-btn" @click="hourline.export()">Export</button>
      </div>
      <div class="chart-wrapper">
        <div id="deviceline"></div>
        <button v-if="deviceline" class="export-btn" @click="deviceline.export()">Export</button>
      </div>
      <el-container id="data-list">
        <el-header id="data-list-header">
          <span>设备</span>
          <el-select v-model="selectedDevice">
            <el-option v-for="item in deviceList" :key="item" :label="item === 'All' ? 'All' :(item === 0 ? '桌面端' : '移动端')" :value="item"></el-option>
          </el-select>
          <span>状态</span>
          <el-select v-model="selectedStatus">
            <el-option v-for="item in statusList" :key="item" :label="item === 'All' ? 'All' :(item === 0 ? '失败' : '成功')" :value="item"></el-option>
          </el-select>
          <span>事件</span>
          <el-select v-model="selectedEventType">
            <el-option v-for="item in eventTypeList" :key="item" :label="item === 'All' ? 'All' :(item === 'login' ? '登录' : '抢座')" :value="item"></el-option>
          </el-select>
          <span>事件代码</span>
          <el-select v-model="selectedEventCode">
            <el-option v-for="item in eventCodeList" :key="item" :label="item" :value="item"></el-option>
          </el-select>
          <span>账号</span>
          <el-select v-model="selectedAccount" filterable>
            <el-option v-for="item in accountList" :key="item" :label="item" :value="item"></el-option>
          </el-select>
          <span>软件版本</span>
          <el-select v-model="selectedVersion">
            <el-option v-for="item in versionList" :key="item" :label="item === 'All' ? 'All' : 'v'+item" :value="item"></el-option>
          </el-select>
        </el-header>
        <el-main style="margin: 0">
          <el-table :data="dataForShow" :border="true" :stripe="true">
            <el-table-column width="50" prop="id" label="Id"></el-table-column>
            <el-table-column width="100" prop="mobile" label="设备">
              <template slot-scope="scope">
                <i v-if="(scope.row.mobile === null || scope.row.mobile === 0)" class="el-icon-menu" style="color: #409EFF"></i>
                <i v-else class="el-icon-mobile-phone" style="color: #909399"></i>
                <span style="margin-left: 5px" :style="{color: (scope.row.mobile === null || scope.row.mobile === 0) ?  '#409EFF': '#909399'}">{{ (scope.row.mobile === null || scope.row.mobile === 0) ? '桌面端' : '移动端' }}</span>
              </template>
            </el-table-column>
            <el-table-column width="100" label="状态">
              <template slot-scope="scope">
                <i v-if="scope.row.state === 1" class="el-icon-success" style="color: green"></i>
                <i v-else class="el-icon-error" style="color: red"></i>
                <span style="margin-left: 5px">{{ scope.row.state === 0 ? '失败' : '成功' }}</span>
              </template>
            </el-table-column>
            <el-table-column width="90" prop="event" label="事件">
              <template slot-scope="scope">
                <i v-if="scope.row.event === 'login'" class="el-icon-phone" style="color: #909399"></i>
                <i v-else class="el-icon-phone-outline" style="color: #E6A23C"></i>
                <span style="margin-left: 5px" :style="{color: scope.row.event === 'login' ? '#909399' : '#E6A23C'}">{{ scope.row.event === 'login' ? '登录' : '抢座' }}</span>
              </template>
            </el-table-column>
            <el-table-column width="60" prop="code" label="Code"></el-table-column>
            <el-table-column width="200" label="时间">
              <template slot-scope="scope">
                <i class="el-icon-time"></i>
                <span style="margin-left: 5px">{{ scope.row.year + '-' + fill0(scope.row.month) + '-' + fill0(scope.row.day) + ' ' + fill0(scope.row.hour) + ':' + fill0(scope.row.min) + ':' + fill0(scope.row.sec) }}</span>
              </template>
            </el-table-column>
            <el-table-column prop="account" label="账号 (加密)" width="250"></el-table-column>
            <el-table-column width="100" label="软件版本">
              <template slot-scope="scope">
                <span>{{ 'v' + scope.row.version }}</span>
              </template>
            </el-table-column>
            <el-table-column prop="message" label="消息"></el-table-column>
          </el-table>
          <p>共 {{countOfSelected}} 条数据</p>
        </el-main>
      </el-container>
    </div>
  </body>
  <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
  <script src="https://unpkg.com/element-ui/lib/index.js"></script>
  <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
  <script src="https://unpkg.com/frappe-charts@1.1.0"></script>
  <script>
    new Vue({
      el: '#app',
      data: {
        heatmap: null,
        hourline: null,
        deviceline: null,
        tableData: [],
        selectedAccount: 'All',
        selectedEventType: 'All',
        selectedEventCode: 'All',
        selectedStatus: 'All',
        selectedVersion: 'All',
        selectedDevice: 'All',
        eventTypeList: ['All'],
        eventCodeList: ['All'],
        accountList: ['All'],
        statusList: ['All'],
        versionList: ['All'],
        deviceList: ['All']
      },
      mounted () {
        axios.get('/staticsdata').then((response) => {
          this.tableData = response.data
          this.eventTypeList = ['All']
          this.eventCodeList = ['All']
          this.accountList = ['All']
          this.statusList = ['All']
          this.versionList = ['All']
          this.tableData.forEach((item) => {
            if (!this.deviceList.includes(item.mobile)) {
              if (item.mobile !== null) {
                this.deviceList.push(item.mobile)
              }
            }
            if (!this.eventCodeList.includes(item.code)) {
              this.eventCodeList.push(item.code)
            }
            if (!this.eventTypeList.includes(item.event)) {
              this.eventTypeList.push(item.event)
            }
            if (!this.accountList.includes(item.account)) {
              this.accountList.push(item.account)
            }
            if (!this.statusList.includes(item.state)) {
              this.statusList.push(item.state)
            }
            if (!this.versionList.includes(item.version)) {
              this.versionList.push(item.version)
            }
          })
        }).catch((error) => {
          console.log(error)
        });
        axios.get('/yeardata').then((response) => {
          let now = new Date()
          this.heatmap = new frappe.Chart("#heatmap", {
            type: 'heatmap',
            title: "Successful reservation count in last year",
            data: {
              dataPoints: response.data,
              start: new Date(now.getFullYear() - 1, now.getMonth(), now.getDate()),
              end: now
            },
            countLabel: '',
            discreteDomains: 0,
            // colors: ['#ebedf0', '#c0ddf9', '#73b3f3', '#3886e1', '#17459e'],
            // Set of five incremental colors,
            // preferably with a low-saturation color for zero data;
            // def: ['#ebedf0', '#c6e48b', '#7bc96f', '#239a3b', '#196127']
          });
        }).catch((error) => {
          console.log(error)
        });
        axios.get('/dayData').then((response) => {
          let labels = []
          let loginData = []
          let grabData = []
          for (let i = 0; i < 24; i++) {
            labels.push(i.toString())
            loginData.push(0)
            grabData.push(0)
          }
          for (let i = 0; i < response.data.length; i++) {
            if (response.data[i].code === 4) {
              loginData[response.data[i].hour] = response.data[i].avg
            } else if (response.data[i].code === 6) {
              grabData[response.data[i].hour] = response.data[i].avg
            }
          }
          this.hourline = new frappe.Chart("#hourline", {
            data: {
              labels: labels,
              datasets: [
                {
                  name: "Login", chartType: 'line',
                  values: loginData
                },
                {
                  name: "Grabing", chartType: 'line',
                  values: grabData
                }
              ]
            },
            title: "Average usage count in a day",
            type: 'line',
            colors: ['light-blue', '#ffa3ef'],
            tooltipOptions: {
              formatTooltipX: d => (d + '').toUpperCase(),
              formatTooltipY: d => d.toFixed(1) + ' times',
            }
          });
        }).catch((error) => {
          console.log(error)
        });
        axios.get('/deviceData').then((response) => {
          let maxLength = 100
          if (response.data.length > maxLength) {
            response.data = response.data.slice(response.data.length - maxLength + 1, response.data.length)
          }
          let labels = []
          let labelsForShow = []
          let mobileData = []
          let desktopData = []
          for (let i = 0; i < response.data.length; i++) {
            let dateFormated = `${response.data[i].year}-${response.data[i].month}-${response.data[i].day}`
            if (!labels.includes(dateFormated)) {
              labels.push(dateFormated)
              labelsForShow.push(labels.length)
            }
          }
          for (let i = 0; i < labels.length; i++) {
            let mobileInTheDay = response.data.filter(item => {
              let dateFormated = `${item.year}-${item.month}-${item.day}`
              return dateFormated === labels[i] && item.mobile === 1
            })
            let desktopInTheDay = response.data.filter(item => {
              let dateFormated = `${item.year}-${item.month}-${item.day}`
              return dateFormated === labels[i] && item.mobile !== 1
            })
            if (mobileInTheDay && mobileInTheDay.length !== 0) {
              mobileData.push(mobileInTheDay[0].count)
            } else {
              mobileData.push(0)
            }
            if (desktopInTheDay && desktopInTheDay.length !== 0) {
              desktopData.push(desktopInTheDay[0].count)
            } else {
              desktopData.push(0)
            }
          }
          this.deviceline = new frappe.Chart( "#deviceline", {
            data: {
              labels: labelsForShow,
              datasets: [
                {
                  name: "Desktop", chartType: 'bar',
                  values: desktopData
                },
                {
                  name: "Mobile", chartType: 'bar',
                  values: mobileData
                }
              ]
            },
            title: "Usages by devices in recent days",
            type: 'bar',
            colors: ['#7cd6fd', '#28a745'],
            tooltipOptions: {
              formatTooltipX: d => labels[parseInt(d) - 1],
              formatTooltipY: d => d === undefined ? 0 : d + ' times',
            }
          });
        }).catch((error) => {
          console.log(error)
        });
      },
      computed: {
        dataForShow () {
          let tempData = this.tableData.filter((item) => {
            return (this.selectedAccount === 'All' || item.account === this.selectedAccount) &&
              ((this.selectedEventType === 'All' || item.event === this.selectedEventType)) &&
              ((this.selectedEventCode === 'All' || item.code === this.selectedEventCode)) &&
              ((this.selectedStatus === 'All' || item.state === this.selectedStatus)) &&
              ((this.selectedVersion === 'All' || item.version === this.selectedVersion)) &&
              ((this.selectedDevice === 'All' || (item.mobile === this.selectedDevice || item.mobile === null)))
          })
          tempData.sort((x, y) => y.id - x.id)
          return tempData
        },
        countOfSelected () {
          return !this.dataForShow ? 0 : this.dataForShow.length
        }
      },
      methods: {
        fill0 (value) {
          var str = value > 9 ? '' : '0'
          return str + value
        }
      }
    })
  </script>
</html>
